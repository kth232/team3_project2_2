<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.choongang.start.member.mapper.MemberMapper">
    <resultMap id="memberMap" type="org.choongang.start.member.entities.Member">
        <!--resultMap은 테이블의 컬럼과 entities 클래스의 멤버변수명과 일치하지 않는 경우 맞춰주기 위해 정의한다.
        ex) Member 클래스에는 userNo로 정의했지만 Member 테이블에는 USER_NO로 되어있음
        -->
        <result column="USER_NO" property="userNo" />
        <result column="USER_ID" property="userId" />
        <result column="USER_PW" property="userPw" />
        <result column="USER_NM" property="userNm" />
        <result column="USER_JOB" property="userJob" />
        <result column="REG_DT" property="regDt" />
    </resultMap>


    <!-- 회원 목록 조회 -->
    <select id="getList" resultMap="memberMap">
        <bind name="pUserId" value="'%' + _parameter.getUserId() + '%'" />
        <bind name="pUserNm" value="'%' + _parameter.getUserNm() + '%'" />
        <bind name="pKeyword" value="'%' + _parameter.getKeyword() + '%'" />
        SELECT * FROM (SELECT ROWNUM NUM, t.* FROM MEMBER t) m
        <where>
            <![CDATA[m.NUM >= {sRow} AND m.NUM <= {eRow}]]>
            <if test="userId != null">
                AND USER_ID LIKE #{pUserId}
            </if>
            <if test="userNm != null">
                AND USER_NM LIKE #{pUserNm}
            </if>
            <if test="keyword != null">
                AND CONCAT(USER_ID, USER_NM) LIKE #{pKeyword}
            </if>
        </where>
        ORDER BY m.regDt DESC
    </select>

    <!-- 회원 개별 조회 -->
    <select id="get" resultMap="memberMap">
        SELECT * FROM MEMBER
        <where>
            <if test="userId != null">
                USER_ID=#{userId}
            </if>
        </where>
    </select>

    <!-- 회원 목록 갯수, 페이징 구현시 활용 가능 -->
    <select id="getTotal" resultType="long">
        <bind name="pUserId" value="'%' + _parameter.getUserId() + '%'" />
        <bind name="pUserNm" value="'%' + _parameter.getUserNm() + '%'" />
        <bind name="pKeyword" value="'%' + _parameter.getKeyword() + '%'" />
        SELECT COUNT(*) FROM MEMBER
        <where>
            <if test="userId != null">
                AND USER_ID LIKE #{pUserId}
            </if>
            <if test="userNm != null">
                AND USER_NM LIKE #{pUserNm}
            </if>
            <if test="keyword != null">
                AND CONCAT(USER_ID, USER_NM) LIKE #{pKeyword}
            </if>
        </where>
    </select>

    <!-- 회원 등록 여부 파악 - 갯수가 나오면 이미 등록으로 판단 -->
    <select id="exist" resultType="int">
        SELECT COUNT(*) FROM MEMBER WHERE USER_ID=#{userId}
    </select>

    <!-- 회원 등록 -->
    <insert id="register">
        <selectKey keyProperty="userNo" order="BEFORE" resultType="long">
            SELECT SEQ_MEMBER.NEXTVAL FROM DUAL
        </selectKey>

        INSERT INTO MEMBER (USER_NO, USER_ID, USER_PW, USER_NM, USER_JOB)
        VALUES (#{userNo}, #{userId}, #{userPw}, #{userNm}, #{userJob})
    </insert>

    <!-- 회원 정보 수정 -->
    <update id="modify">
        UPDATE MEMBER
        <set>
            <if test="userPw != null">
                USER_PW=#{userPw},
            </if>
            <if test="userNm != null">
                USER_NM=#{userNm},
            </if>
            <if test="userJob != null">
                USER_JOB=#{userJob},
            </if>
        </set>
        WHERE USER_ID=#{userId}
    </update>

    <!-- 회원 삭제 -->
    <delete id="delete">
        DELETE FROM MEMBER WHERE USER_ID=#{userId}
    </delete>
</mapper>